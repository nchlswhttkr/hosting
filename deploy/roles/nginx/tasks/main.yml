- name: Ensure keyring directory exists
  become: true
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory

- name: Get Nginx signing key
  become: true
  ansible.builtin.get_url:
    url: https://nginx.org/keys/nginx_signing.key
    dest: /etc/apt/keyrings/nginx.asc
    force: true

- name: Add Nginx package repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/nginx.asc] http://nginx.org/packages/mainline/{{ ansible_facts['lsb']['id'].lower() }} {{ ansible_facts['lsb']['codename'] }} nginx"

- name: Add Nginx package and modules
  become: true
  ansible.builtin.apt:
    name:
      - nginx
      - nginx-module-otel
    state: latest

- name: Configure Nginx
  register: configure_nginx
  become: true
  vars:
    # TODO: Fix circular dependency on Vault
    honeycomb_ingest_api_key: "{{ lookup('community.general.passwordstore', 'hosting/nginx-honeycomb-ingest-api-key') }}"
  ansible.builtin.template:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf

- name: Copy Nginx host configuration
  register: configure_host
  become: true
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/{{ nginx_hostname }}.conf"
    dest: /etc/nginx/conf.d/{{ nginx_hostname }}.conf
    mode: "0600"

- name: Ensure keyring directory exists
  become: true
  ansible.builtin.file:
    path: /etc/letsencrypt
    state: directory

- name: Configure Certbot
  become: true
  ansible.builtin.copy:
    src: "certbot-cli.ini"
    dest: /etc/letsencrypt/cli.ini

- name: Set Cloudflare credentials for Certbot
  become: true
  ansible.builtin.copy:
    # TODO: Fix circular dependency on Vault
    content: |
      dns_cloudflare_api_token = {{ lookup('community.general.passwordstore', 'hosting/cloudflare-dns-api-token') }}
    dest: /etc/letsencrypt/cloudflare.ini
    mode: "0600"

- name: Check for presence of TLS certificates
  register: check_tls_certificates
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ nginx_hostname }}/privkey.pem

- name: Provision TLS certificate with Cerbot
  register: provision_tls_certificates
  when: not check_tls_certificates.stat.exists
  ansible.builtin.shell: certbot certonly --domain {{ nginx_hostname }}

- name: Test Nginx configuration
  when: provision_tls_certificates.changed or configure_nginx.changed or configure_host.changed
  become: true
  ansible.builtin.shell: nginx -t

- name: Ensure Nginx is running
  when: provision_tls_certificates.changed or configure_nginx.changed or configure_host.changed
  become: true
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true

- name: Reload Nginx
  when: provision_tls_certificates.changed or configure_nginx.changed or configure_host.changed
  become: true
  ansible.builtin.shell: nginx -s reload
